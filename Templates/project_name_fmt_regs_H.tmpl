/******************************************************
* ArchC Formatted Registers header file.             *
* This file is automatically generated by ArchC      *
* WITHOUT WARRANTY OF ANY KIND, either express       *
* or implied.                                        *
* For more information on ArchC, please visit:       *
* http://www.archc.org                               *
*                                                    *
* The ArchC Team                                     *
* Computer Systems Laboratory (LSC)                  *
* IC-UNICAMP                                         *
* http://www.lsc.ic.unicamp.br                       *
******************************************************/

\#ifndef  $(upper_project_name)_FMT_REGS_H
\#define  $(upper_project_name)_FMT_REGS_H

\#include  <iostream>
\#include  <string>
\#include  "ac_reg.H"
\#include  "$(project_name)_parms.H"

using std::ostream;
using std::string;

//!ArchC classes for formatted registers.
#for pstorage in $storage_list
#if ($pstorage['type'] == "REG" and $pstorage['format'] != None)
#for pformat in $format_reg_list
#if $pformat['name'] == $pstorage['name']
#break
#end if
#end for
## Declaring formatted register class.
class $(project_name)_fmt_$pstorage['name'] {
  string name;
  public:
    ## TO DO: Registers with parameterized size. The templated class ac_reg
    ##        is still not working with sc_unit<x> types.
    #for pfield in $pformat['fields']
    ac_reg<unsigned> $pfield['name'];
    #end for

    ## Declaring class constructor.
    #if ($ACDelayFlag)
    $(project_name)_fmt_$(pstorage['name'])(char* n, double& ts):
    #else
    $(project_name)_fmt_$(pstorage['name'])(char* n):
    #end if
      #for pfield in $pformat['fields'][:-1]
      ## Initializing field names with reg name. This is to enable Formatted Reg stats.
      ## Need to be changed if we adopt statistics collection for each field individually.
      #if ($ACDelayFlag)
      $(pfield['name'])("$(pstorage['name'])",0,ts),
      #else
      $(pfield['name'])("$(pstorage['name'])",0),
      #end if
      #end for
      ## Last field.
      #if ($ACDelayFlag)
      $(pfield['name'])("$(pstorage['name'])",0,ts) {name = n;}
      #else
      $(pfield['name'])("$(pstorage['name'])",0) {name = n;}
      #end if

    void change_dump(ostream& output) {}

    void reset_log(){}

    #if ($ACDelayFlag)
    void commit_delays(double time) {
      #for pfield in $pformat['fields']
      $(pfield['name']).commit_delays(time);
      #end for
    }
    #end if
};
#end if
#end for

##We had at last one formatted reg declared.
\#endif // $(upper_project_name)_FMT_REGS_H\

##END OF FILE