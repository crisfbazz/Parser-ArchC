/******************************************************
* ArchC Parameters header file.                      *
* This file is automatically generated by ArchC      *
* WITHOUT WARRANTY OF ANY KIND, either express       *
* or implied.                                        *
* For more information on ArchC, please visit:       *
* http://www.archc.org                               *
*                                                    *
* The ArchC Team                                     *
* Computer Systems Laboratory (LSC)                  *
* IC-UNICAMP                                         *
* http://www.lsc.ic.unicamp.br                       *
******************************************************/

\#ifndef  _$(upper_project_name)_PARMS_H
\#define  _$(upper_project_name)_PARMS_H

#* options defines *#
#if ($ACVerboseFlag)
\#define  AC_UPDATE_LOG     //!< Update log generation turned on.
\#define  AC_VERBOSE        //!< Indicates Verbose mode. Where update logs are dumped on screen.
#end if
#if( $ACDebugFlag )
\#define  AC_DEBUG          //!< Indicates that debug option is turned on.

#end if
#if($ACDelayFlag)
\#define  AC_DELAY          //!< Indicates that delay option is turned on.

#end if
#if ($ACStatsFlag)
\#define  AC_STATS          //!< Indicates that statistics collection is turned on.
#end if
#if ($HaveMemHier)
\#define  AC_MEM_HIERARCHY  //!< Indicates that a memory hierarchy was declared.

#end if
#if ($HaveCycleRange)
\#define  AC_CYCLE_RANGE    //!< Indicates that cycle range for instructions were declared.

#end if
#if ($ACLongJmpStop or $ACThreading)
\#define  AC_ACTION_STOP 2  //!< Indicates action value to stop used by longjmp.

#end if
#* parms namespace definition *#
namespace $(project_name)_parms {

  static const unsigned int AC_DEC_FIELD_NUMBER = $decoder_nFields;      //!< Number of Fields used by decoder;
  static const unsigned int AC_DEC_INSTR_NUMBER = $instr_num;      //!< Number of Instructions declared.
  static const unsigned int AC_DEC_FORMAT_NUMBER = $format_num;      //!< Number of Formats declared.
  static const unsigned int AC_DEC_LIST_NUMBER = $declist_num;       //!< Number of decodification lists used by decoder.
  static const unsigned int AC_MAX_BUFFER = $(largest_format_size/8);             //!< This is the size needed by decoder buffer. It is equal to the biggest instruction size.
  static const unsigned int AC_WORDSIZE = $wordsize;              //!< Architecture wordsize in bits.
  static const unsigned int AC_FETCHSIZE = $fetchsize;             //!< Architecture fetchsize in bits.
  static const unsigned int AC_MATCH_ENDIAN = $ac_match_endian;           //!< If the simulated arch match the endian with host.
  static const unsigned int AC_PROC_ENDIAN = $ac_tgt_endian;            //!< The simulated arch is big endian?
  static const unsigned int AC_RAMSIZE = $(load_device['size'])U;        //!< Architecture RAM size in bytes (storage $load_device['name']).
  static const unsigned int AC_RAM_END = $(load_device['size'])U;        //!< Architecture end of RAM (storage $load_device['name']).
#if ($ACGDBIntegrationFlag)
  static const unsigned int GDB_PORT_NUM = 5000;                      //!< GDB port number.
#end if

  //!Word type definitions.
##Emiting ArchC word types.
#if ($wordsize == 8)
  #set $type_word = 'unsigned char'
  #set $type_Uword = 'unsigned char'
  #set $type_Sword = 'char'
  #set $type_Hword = 'unsigned char'
  #set $type_UHword = 'unsigned char'
  #set $type_ac_SHword = 'char'
  #set $type_ac_Dword = 'unsigned short'
  #set $type_UDword = 'unsigned short'
  #set $type_SDword = 'short'
#else if ($wordsize == 16)
  #set $type_word = 'unsigned short'
  #set $type_Uword = 'unsigned short'
  #set $type_Sword = 'short int'
  #set $type_Hword = 'unsigned char'
  #set $type_UHword = 'unsigned char'
  #set $type_ac_SHword = 'char'
  #set $type_ac_Dword = 'unsigned int'
  #set $type_UDword = 'unsigned int'
  #set $type_SDword = 'int'
#else if ($wordsize == 32)
  #set $type_word = 'unsigned int'
  #set $type_Uword = 'unsigned int'
  #set $type_Sword = 'int'
  #set $type_Hword = 'unsigned short int'
  #set $type_UHword = 'unsigned short int'
  #set $type_ac_SHword = 'short int'
  #set $type_ac_Dword = 'unsigned long long'
  #set $type_UDword = 'unsigned long long'
  #set $type_SDword = 'long long'
#else if ($wordsize == 64)
  #set $type_word = 'unsigned long long'
  #set $type_Uword = 'unsigned long long'
  #set $type_Sword = 'long long'
  #set $type_Hword = 'unsigned int'
  #set $type_UHword = 'unsigned int'
  #set $type_ac_SHword = 'int'
  #set $type_ac_Dword = 'null'
  #set $type_UDword = 'null'
  #set $type_SDword = 'null'
#else
<% print "Wordsize not supported." %>
#raise ValueError
#end if
  typedef  $type_word ac_word;            //!< Unsigned word.
  typedef  $type_Uword ac_Uword;           //!< Unsigned word.
  typedef  $type_Sword ac_Sword;                    //!< Signed word.
  typedef  $type_Hword ac_Hword;     //!< Signed half word.
  typedef  $type_UHword ac_UHword;    //!< Unsigned half word.
  typedef  $type_ac_SHword ac_SHword;             //!< Signed half word.
#if ($wordsize != 64)
  typedef  $type_ac_Dword ac_Dword;     //!< Signed double word.
  typedef  $type_UDword ac_UDword;    //!< Unsigned double word.
  typedef  $type_SDword ac_SDword;             //!< Signed double word.
#end if
  typedef  char ac_byte;                    //!< Signed byte word.
  typedef  unsigned char ac_Ubyte;          //!< Unsigned byte word.

  //!Fetch type definition.
#if ($fetchsize == 8)
  #set $type_fetch = 'unsigned char'
#else if ($fetchsize == 16)
  #set $type_fetch = 'unsigned short int'
#else if ($fetchsize == 32)
  #set $type_fetch = 'unsigned int'
#else if ($fetchsize == 64)
  #set $type_fetch = 'unsigned long long'
#else
<% print "Fetchsize not supported." %>
#raise ValueError
#end if
  typedef  $type_fetch ac_fetch;           //!< Unsigned word.

  ##This enum type is used for case identification inside the ac_behavior methods
  enum ac_stage_list {ST0}; ##Closing enum declaration

#* closing namespace declaration *#
}

//Create a compiler error if delay assignment is used without the -dy option
\#ifndef AC_DELAY
extern $(project_name)_parms::ac_word ArchC_ERROR___PLEASE_USE_OPTION_DELAY_WHEN_CREATING_SIMULATOR___;
\#define delay(a,b) ArchC_ERROR___PLEASE_USE_OPTION_DELAY_WHEN_CREATING_SIMULATOR___
\#endif


\#endif  //_$(upper_project_name)_PARMS_H
