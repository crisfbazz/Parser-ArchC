/******************************************************
* AC_ISA Initialization File                         *
* This file is automatically generated by ArchC      *
* WITHOUT WARRANTY OF ANY KIND, either express       *
* or implied.                                        *
* For more information on ArchC, please visit:       *
* http://www.archc.org                               *
*                                                    *
* The ArchC Team                                     *
* Computer Systems Laboratory (LSC)                  *
* IC-UNICAMP                                         *
* http://www.lsc.ic.unicamp.br                       *
******************************************************/

#* Creating static decoder tables *#
\#include "$(project_name)_isa.H"

#* Creating group tables. *#
#for pgroup in $group_list
//!Group $pgroup['name'] table initialization.
  bool $(project_name)_parms::$(project_name)_isa::group_$pgroup['name']\[$(project_name)_parms::AC_DEC_INSTR_NUMBER] =  {
  #for pinstr in $instr_list
  #for pref in $pgroup['instrs']
  #if ($pref['instr'] == $pinstr)
  #break
  #end if
  #end for
  #if not ($pref)
  false#slurp
  #else
  true#slurp
  #end if
  #if ($pinstr != $instr_list[-1])
,
  #else

};

  #end if
  #end for
#end for
//!Fields table declaration.

#* Creating field table *#
ac_dec_field $(project_name)_parms::$(project_name)_isa::fields[$(project_name)_parms::AC_DEC_FIELD_NUMBER] = {
  #set $i = 0
  #for pformat in $format_ins_list
  #for pdecfield in $pformat['fields']
  #* print {char* name, int size, int first_bit, int id, long val, int sign, next} *#
  {"$pdecfield['name']", $pdecfield['size'], $pdecfield['first_bit'], $pdecfield['id'], $pdecfield['val'], $pdecfield['sign'], #slurp
  #if ($pdecfield != $pformat['fields'][-1])
&($(project_name)_parms::$(project_name)_isa::fields[$(i+1)])},
  #else
NULL}#slurp
  #end if
  #set $i += 1
  #end for
  #if ($pformat != $format_ins_list[-1])
,
  #end if
  #end for

};

#* Creating format structure *#
ac_dec_format $(project_name)_parms::$(project_name)_isa::formats[$(project_name)_parms::AC_DEC_FORMAT_NUMBER] = {
  #set $i = 0
  #set $count_fields = 0
  #for pformat in $format_ins_list
  #* print int id, char* name, int size, ac_dec_field* fields, next *#
  {$pformat['id'], "$pformat['name']", $pformat['size'], &($(project_name)_parms::$(project_name)_isa::fields[$count_fields]), #slurp
  #if ($pformat != $format_ins_list[-1])
&($(project_name)_parms::$(project_name)_isa::formats[$(i+1)])},
  #else
NULL}#slurp
  #end if
  #set $i += 1
  #for pdecfield in $pformat['fields']
  #set $count_fields += 1
  #end for
  #end for

};

#* Creating decode list structure *#
ac_dec_list $(project_name)_parms::$(project_name)_isa::dec_list[$(project_name)_parms::AC_DEC_LIST_NUMBER] = {
  #set $i = 0
  #for pinstr in $instr_list
  #for pdeclist in $pinstr['dec_list']
  #* fprintf char* name, int id, int value, ac_dec_list* next  *#
  {"$pdeclist['name']", $pdeclist['id'], $pdeclist['value'], #slurp
  #if ($pdeclist != $pinstr['dec_list'][-1])
&($(project_name)_parms::$(project_name)_isa::dec_list[$(i+1)])},
  #else
NULL}#slurp
  #end if
  #set $i += 1
  #end for
  #if ($pinstr != $instr_list[-1])
,
  #end if
  #end for

};

#set $declist_num = $i
#* Creating instruction structure *#
ac_dec_instr $(project_name)_parms::$(project_name)_isa::instructions[$(project_name)_parms::AC_DEC_INSTR_NUMBER] = {
  #set $i = 0
  #set $count_fields = 0
  #for pinstr in $instr_list
  #* print char* name, int size, char* mnemonic, char* asm_str, char* format, unsigned id, unsigned cycles, unsigned min_latency, unsigned max_latency, ac_dec_list* dec_list, ac_control_flow* cflow, ac_dec_instr* next *#
  {"$pinstr['name']", $pinstr['size'], "$pinstr['mnemonic']", "$pinstr['asm_str']", "$pinstr['format']", $pinstr['id'], $pinstr['cycles'], $pinstr['min_latency'], $pinstr['max_latency'], &($(project_name)_parms::$(project_name)_isa::dec_list[$count_fields]), 0, #slurp
  #if ($pinstr != $instr_list[-1])
&($(project_name)_parms::$(project_name)_isa::instructions[$(i+1)])},
  #else
NULL}
  #end if
  #for pdeclist in $pinstr['dec_list']
  #set $count_fields += 1
  #end for
  #set $i += 1
  #end for
};

#* Creating instruction table *#
const ac_instr_info
$(project_name)_parms::$(project_name)_isa::instr_table[$(project_name)_parms::AC_DEC_INSTR_NUMBER + 1] = {
  ac_instr_info(0, "_ac_invalid_", "_ac_invalid_", $(wordsize/8)),
  #for pinstr in $instr_list
  ac_instr_info($pinstr['id'], "$pinstr['name']", "$pinstr['mnemonic']", $pinstr['size'])#slurp
  #if ($pinstr != $instr_list[-1])
 ,
  #end if
  #end for

};

#* Creating instruction format table *#
const unsigned $(project_name)_parms::$(project_name)_isa::instr_format_table[$(project_name)_parms::AC_DEC_INSTR_NUMBER + 1] = {
  0,
  #for pinstr in $instr_list
  ## find format
  #for pformat in $format_ins_list
  #if ($pinstr['format'] == $pformat['name'])
  $pformat['id']#slurp
  #break
  #end if
  #end for
  #if ($pinstr != $instr_list[-1])
,
  #end if
  #end for

};

##!END OF FILE.