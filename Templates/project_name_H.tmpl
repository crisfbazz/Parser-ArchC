/******************************************************
* Architecture Module header file.                   *
* This file is automatically generated by ArchC      *
* WITHOUT WARRANTY OF ANY KIND, either express       *
* or implied.                                        *
* For more information on ArchC, please visit:       *
* http://www.archc.org                               *
*                                                    *
* The ArchC Team                                     *
* Computer Systems Laboratory (LSC)                  *
* IC-UNICAMP                                         *
* http://www.lsc.ic.unicamp.br                       *
******************************************************/

\#ifndef  _$(upper_project_name)_H
\#define  _$(upper_project_name)_H

\#include "systemc.h"
\#include "ac_module.H"
\#include "ac_utils.H"
\#include "$(project_name)_parms.H"
\#include "$(project_name)_arch.H"
\#include "$(project_name)_isa.H"
#if ($ACABIFlag)
\#include "$(project_name)_syscall.H"
#end if
#if ($HaveTLMIntrPorts)
\#include "ac_tlm_intr_port.H"
\#include "$(project_name)_intr_handlers.H"
#end if
#if ($HaveTLM2IntrPorts)
\#include "ac_tlm2_intr_port.H"
\#include "$(project_name)_intr_handlers.H"
#end if
#if ($ACGDBIntegrationFlag)
\#include "ac_gdb_interface.H"
\#include "ac_gdb.H"
#end if

class $(project_name): public ac_module, public $(project_name)_arch#slurp
#if ( $ACGDBIntegrationFlag )
, public AC_GDB_Interface<$(project_name)_parms::ac_word>#slurp
#end if
{
  #if ($ACDecCacheFlag)
  private:
    #**************************************************#
    #* START EmitDecCache                             *#
    #*!  Emits a Decoder Cache Structure.             *#
    #* \brief Used by CreateProcessorHeader function  *#
    #**************************************************#
    #for pformat in $format_ins_list
    typedef struct {
    #for pfield in $pformat['fields']
    #if not ($pfield['sign'])
      ui#slurp
    #else
      i#slurp
    #end if
    #if (int($pfield['size']) < 9)
nt8_t#slurp
    #else if (int($pfield['size']) < 17)
nt16_t#slurp
    #else if (int($pfield['size']) < 33)
nt32_t#slurp
    #else
nt64_t#slurp
    #end if
 $pfield['name'];
    #end for
    } T_$pformat['name'];

    #end for
    typedef struct {
    #if not ($ACFullDecode)
      bool valid;
    #end if
    #if ($ACThreading)
      void* end_rot;
    #end if
      unsigned id;
      union {
        #for pformat in $format_ins_list
        T_$pformat['name'] F_$pformat['name'];
        #end for
      };
    } DecCacheItem ;

    #* END EmitDecCache *#
  #end if
  public:
    #if ($ACVerboseFlag)
    sc_signal<bool> done;

    #end if
    bool has_delayed_load;
    char* delayed_load_program;
    $(project_name)_parms::$(project_name)_isa ISA;
    #if ($HaveTLMIntrPorts)
    #for pport in $tlm_intr_port_list
    $(project_name)_$(pport['name'])_handler $(pport['name'])_hnd;
    ac_tlm_intr_port $(pport['name']);

    #end for
    #end if
    #if ($HaveTLM2IntrPorts)
    #for pport in $tlm2_intr_port_list
    $(project_name)_$(pport['name'])_handler $(pport['name'])_hnd;
    ac_tlm2_intr_port $(pport['name']);

    #end for
    #end if
    #if ($ACThreading)
    //!Address of Interpretation Routines.
    void** IntRoutine;

    #end if
    #if ($ACDecCacheFlag)
    DecCacheItem* DEC_CACHE;
    DecCacheItem* instr_dec;
    #else
    unsigned* ins_cache;
    #end if
    unsigned id;
    bool start_up;
    #if ($ACGDBIntegrationFlag)
    AC_GDB<$(project_name)_parms::ac_word>* gdbstub;
    #end if
    #if ($ACThreading)

    //!Dispatch Method.
    inline __attribute__((always_inline)) void* dispatch();
    #end if

    //!Behavior execution method.
    void behavior();

    #if ($ACVerboseFlag)
    //!Verification method.
    void ac_verify();

    #end if
    SC_HAS_PROCESS($(project_name));

    ##!Declaring ARCH Constructor.
    //!Constructor.
    $(project_name)(sc_module_name name_): ac_module(name_), $(project_name)_arch(), ISA(*this)#slurp
    #if ($HaveTLMIntrPorts)
    #for pport in $tlm_intr_port_list
, $(pport['name'])_hnd(*this), $(pport['name'])("$(pport['name'])", $(pport['name'])_hnd)#slurp
    #end for
    #end if
    #if ($HaveTLM2IntrPorts)
    #for pport in $tlm2_intr_port_list
, $(pport['name'])_hnd(*this), $(pport['name'])("$(pport['name'])", $(pport['name'])_hnd)#slurp
    #end for
    #end if
 {

      SC_THREAD(behavior);
      #if ($ACVerboseFlag)
      SC_THREAD(ac_verify);
      sensitive<< done;

      #end if
      has_delayed_load = false;
      start_up = 1;
      id = 1;

      #if ($ACGDBIntegrationFlag)
      gdbstub = new AC_GDB<$(project_name)_parms::ac_word>(this, $(project_name)_parms::GDB_PORT_NUM);

      #end if
    } ##end constructor

    #if ($ACDecCacheFlag)
    void init_dec_cache() {
      DEC_CACHE = (DecCacheItem*) calloc(sizeof(DecCacheItem), (dec_cache_size#slurp
      #if ($ACIndexFix)
/ $(largest_format_size/8)#slurp
      #end if
));
    } ##end init_dec_cache

    #end if
    #if ($ACGDBIntegrationFlag)
    /***********
    * GDB Support - user supplied methods
    * For further information, look at ~/src/aclib/ac_gdb/ac_gdb_interface.H
    ***********/

    /* Processor Feature Support */
    bool get_ac_tgt_endian();

    void ac_stop();

    /* Register access */
    int nRegs(void);
    $(project_name)_parms::ac_word reg_read(int reg);
    void reg_write( int reg, $(project_name)_parms::ac_word value );

    /* Memory access */
    unsigned char mem_read( unsigned int address );
    void mem_write( unsigned int address, unsigned char byte );

    /* GDB stub access */
    AC_GDB<$(project_name)_parms::ac_word>* get_gdbstub();

    #end if
    unsigned get_ac_pc();

    void set_ac_pc( unsigned int value );

    virtual void PrintStat();

    void init(int ac, char* av[]);

    void init();

    void load(char* program);

    void delayed_load(char* program);

    void stop(int status = 0);

    #if ($ACGDBIntegrationFlag)
    void enable_gdb(int port = 5000);

    #end if
    virtual ~$(project_name)() {};

    ##!closing class declaration
};
\#endif  //_$(upper_project_name)_H
