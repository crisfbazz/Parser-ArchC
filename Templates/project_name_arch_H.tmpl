/******************************************************
* ArchC Resources header file.                       *
* This file is automatically generated by ArchC      *
* WITHOUT WARRANTY OF ANY KIND, either express       *
* or implied.                                        *
* For more information on ArchC, please visit:       *
* http://www.archc.org                               *
*                                                    *
* The ArchC Team                                     *
* Computer Systems Laboratory (LSC)                  *
* IC-UNICAMP                                         *
* http://www.lsc.ic.unicamp.br                       *
******************************************************/

\#ifndef  $(upper_project_name)_ARCH_H
\#define  $(upper_project_name)_ARCH_H

\#include  "$(project_name)_parms.H"
\#include  "ac_arch_dec_if.H"
\#include  "ac_storage.H"
\#include  "ac_memport.H"
\#include  "ac_regbank.H"
\#include  "ac_reg.H"
#if ($HaveTLMPorts)
\#include  "ac_tlm_port.H"
#end if
#if ($HaveTLMIntrPorts)
\#include  "ac_tlm_intr_port.H"
#end if
#if ($HaveTLM2Ports)
\#include  "ac_tlm2_port.H"
#end if
#if ($HaveTLM2NBPorts)
\#include  "ac_tlm2_nb_port.H"
#end if
#if ($HaveTLM2IntrPorts)
\#include  "ac_tlm2_intr_port.H"
#end if
#if ($HaveFormattedRegs)
\#include  "$(project_name)_fmt_regs.H"
#end if

#if ( $ACGDBIntegrationFlag )
// AC_GDB template class forward declaration
template <typename ac_word> class AC_GDB;

#end if
##Declaring Architecture Resources class.
//!ArchC class for model-specific architectural resources.
class $(project_name)_arch : public ac_arch_dec_if<$(project_name)_parms::ac_word, $(project_name)_parms::ac_Hword> {
  public:

    #* Declaring Program Counter *#
    //!Program Counter.
    ac_reg<unsigned> ac_pc;

    #* Declaring storage devices *#
    //!Storage Devices.
    #for pstorage in $storage_list
    #if ($pstorage['type'] == "REG")
    ##Formatted registers have a special class.
    #if ($pstorage['format'])
    $(project_name)_fmt_$pstorage['name'] $pstorage['name'];
    #else
    #if ($pstorage['width'] == 0)
    ac_reg<$(project_name)_parms::ac_word> $pstorage['name'];
    #else if ($pstorage['width'] == 1)
    ac_reg<bool> $pstorage['name'];
    #else if ($pstorage['width'] == 8)
    ac_reg<unsigned char> $pstorage['name'];
    #else if ($pstorage['width'] == 16)
    ac_reg<unsigned short> $pstorage['name'];
    #else if ($pstorage['width'] == 32)
    ac_reg<unsigned long> $pstorage['name'];
    #else if ($pstorage['width'] == 64)
    ac_reg<unsigned long long> $pstorage['name'];
    #else
    #set global $width = $pstorage['width']
    <% print "Register width not supported: " + self.getVar('width') %>
    #raise ValueError
    #end if
    #end if
    #else if ($pstorage['type'] == "REGBANK")
    ##Emiting register bank. Checking is a register width was declared.
    #if ($pstorage['width'] == 0)
    ac_regbank<$pstorage['size'], $(project_name)_parms::ac_word, $(project_name)_parms::ac_Dword> $pstorage['name'];
    #else if ($pstorage['width'] == 8)
    ac_regbank<$pstorage['size'], unsigned char, unsigned char> $pstorage['name'];
    #else if ($pstorage['width'] == 16)
    ac_regbank<$pstorage['size'], unsigned short, unsigned long> $pstorage['name'];
    #else if ($pstorage['width'] == 32)
    ac_regbank<$pstorage['size'], unsigned long, unsigned long long> $pstorage['name'];
    #else if ($pstorage['width'] == 64)
    ac_regbank<$pstorage['size'], unsigned long long, unsigned long> $pstorage['name'];
    #else
    #set global $width = $pstorage['width']
    <% print "Register width not supported: " + self.getVar('width') %>
    #raise ValueError
    #end if
    #else if ($pstorage['type'] == "CACHE" or $pstorage['type'] == "ICACHE" or $pstorage['type'] == "DCACHE")
    #if not ($HaveMemHier)
    ##It is a generic cache. Just emit a base container object.
    ac_storage $(pstorage['name'])_stg;
    ac_memport<$(project_name)_parms::ac_word, $(project_name)_parms::ac_Hword> $pstorage['name'];
    #else
    ##It is an ac_cache object.
    ac_cache $pstorage['name'];
    #end if
    #else if ($pstorage['type'] == "MEM")
    #if not ( $HaveMemHier )
    ##It is a generic mem. Just emit a base container object.
    ac_storage $(pstorage['name'])_stg;
    ac_memport<$(project_name)_parms::ac_word, $(project_name)_parms::ac_Hword> $pstorage['name'];
    #else
    ##It is an ac_mem object.
    ac_mem $pstorage['name'];
    #end if
    #else if ($pstorage['type'] == "TLM_PORT")
    ac_tlm_port $(pstorage['name'])_port;
    ac_memport<$(project_name)_parms::ac_word, $(project_name)_parms::ac_Hword> $pstorage['name'];
    #else if ($pstorage['type'] == "TLM2_PORT")
    ac_tlm2_port $(pstorage['name'])_port;
    ac_memport<$(project_name)_parms::ac_word, $(project_name)_parms::ac_Hword> $pstorage['name'];
    #else if ($pstorage['type'] == "TLM2_NB_PORT")
    ac_tlm2_nb_port $(pstorage['name'])_port;
    ac_memport<$(project_name)_parms::ac_word, $(project_name)_parms::ac_Hword> $pstorage['name'];
    #else
    ac_storage $(pstorage['name'])_stg;
    ac_memport<$(project_name)_parms::ac_word, $(project_name)_parms::ac_Hword> $pstorage['name'];
    #end if
    #end for
    ##ac_resources constructor declaration
    //!Constructor.
    explicit $(project_name)_arch();

    //!Module initialization method.
    virtual void init(int ac, char* av[]) = 0;

    //!Module finalization method.
    virtual void stop(int status = 0) = 0;

    #if ($ACGDBIntegrationFlag)
    //!GDB stub access virtual method declaration.
    virtual AC_GDB<$(project_name)_parms::ac_word>* get_gdbstub() = 0;

    #end if
    //!Virtual destructor declaration.
    virtual ~$(project_name)_arch() {};

};
\#endif  //_$(upper_project_name)_ARCH_H