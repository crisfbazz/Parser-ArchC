/******************************************************
* ArchC Resources header file.                       *
* This file is automatically generated by ArchC      *
* WITHOUT WARRANTY OF ANY KIND, either express       *
* or implied.                                        *
* For more information on ArchC, please visit:       *
* http://www.archc.org                               *
*                                                    *
* The ArchC Team                                     *
* Computer Systems Laboratory (LSC)                  *
* IC-UNICAMP                                         *
* http://www.lsc.ic.unicamp.br                       *
******************************************************/

\#ifndef  _$(upper_project_name)_ARCH_REF_H
\#define  _$(upper_project_name)_ARCH_REF_H

\#include  "$(project_name)_parms.H"
\#include  "ac_arch_ref.H"
\#include  "ac_memport.H"
\#include  "ac_reg.H"
\#include  "ac_regbank.H"
#if ($HaveTLMIntrPorts)
\#include  "ac_tlm_intr_port.H"
#end if

#if ($HaveTLM2IntrPorts)
#include  "ac_tlm2_intr_port.H"

#end if
//!Forward class declaration, needed to compile.
class $(project_name)_arch;

##Declaring Architecture Resource references class.
//!ArchC class for model-specific architectural resources.
class $(project_name)_arch_ref : public ac_arch_ref<$(project_name)_parms::ac_word, $(project_name)_parms::ac_Hword> {
  public:
    #* Declaring Program Counter *#
    //!Program Counter.
    ac_reg<unsigned>& ac_pc;

    #* Declaring storage devices *#
    //!Storage Devices.
    #for pstorage in $storage_list
    #if ($pstorage['type'] == "REG")
    ##Formatted registers have a special class.
    #if ($pstorage['format'])
    $(project_name)_fmt_$(pstorage['name'])& $pstorage['name'];
    #else
    #if ($pstorage['width'] == 0)
    ac_reg<$(project_name)_parms::ac_word>& $pstorage['name'];
    #else if ($pstorage['width'] == 1)
    ac_reg<bool>& $pstorage['name'];
    #else if ($pstorage['width'] == 8)
    ac_reg<unsigned char>& $pstorage['name'];
    #else if ($pstorage['width'] == 16)
    ac_reg<unsigned short>& $pstorage['name'];
    #else if ($pstorage['width'] == 32)
    ac_reg<unsigned long>& $pstorage['name'];
    #else if ($pstorage['width'] == 64)
    ac_reg<unsigned long long>& $pstorage['name'];
    #else
    #set global $width = $pstorage['width']
    <% print "ArchC ERROR: Register REG width not supported: " + self.getVar('width') %>
    ## stop program
    #raise ValueError
    #end if
    #end if
    #else if ($pstorage['type'] == "REGBANK")
    ##Emiting register bank. Checking is a register width was declared.
    #if ($pstorage['width'] == 0)
    ac_regbank<$(pstorage['size']), $(project_name)_parms::ac_word, $(project_name)_parms::ac_Dword>& $pstorage['name'];
    #else if ($pstorage['width'] == 8)
    ac_regbank<$(pstorage['size']), unsigned char, unsigned char>& $pstorage['name'];
    #else if ($pstorage['width'] == 16)
    ac_regbank<$(pstorage['size']), unsigned short, unsigned long>& $pstorage['name'];
    #else if ($pstorage['width'] == 32)
    ac_regbank<$(pstorage['size']), unsigned long, unsigned long long>& $pstorage['name'];
    #else if ($pstorage['width'] == 64)
    ac_regbank<$(pstorage['size']), unsigned long long, unsigned long long>& $pstorage['name'];
    #else
    #set global $width = $pstorage['width']
    <% print "ArchC ERROR: Register REGBANK width not supported: " + self.getVar('width') %>
    ## stop program
    #raise ValueError
    #end if
    #else if ($pstorage['type'] == "CACHE" or $pstorage['type'] == "ICACHE" or $pstorage['type'] == "DCACHE")
    #if not ($HaveMemHier)
    ##It is a generic cache. Just emit a base container object.
    ac_memport<$(project_name)_parms::ac_word, $(project_name)_parms::ac_Hword>& $pstorage['name'];
    #else
    ##It is an ac_cache object.
    ac_cache& $pstorage['name'];
    #end if
    #else if ($pstorage['type'] == "MEM")
    #if not ($HaveMemHier)
    ##It is a generic mem. Just emit a base container object.
    ac_memport<$(project_name)_parms::ac_word, $(project_name)_parms::ac_Hword>& $pstorage['name'];
    #else
    ##It is an ac_mem object.
    ac_mem& $pstorage['name'];
    #end if
    #else
    ac_memport<$(project_name)_parms::ac_word, $(project_name)_parms::ac_Hword>& $pstorage['name'];
    #end if
    #end for

    ##ac_resources constructor declaration
    //!Constructor.
    $(project_name)_arch_ref($(project_name)_arch& arch);

};  ##End of _arch_ref class

\#endif  //_$(upper_project_name)_ARCH_REF_H